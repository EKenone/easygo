package {{ .Package }}

import (
	"{{ .ModName }}/{{ .ErrCode }}"
	"github.com/tdeken/ginaction"
	"github.com/gin-gonic/gin"
)

type Api struct {
}

// ChooseMid 可以选择的服务中间件
func (a Api) ChooseMid(router *gin.RouterGroup, t ginaction.MidType) gin.IRoutes {
	switch t {
	default:
		return router
	}
}

// Group 接口组标识
func (a Api) Group() string {
	return ""
}

// Register 接口注册
func (a Api) Register() []ginaction.Action {
	return nil
}

// ValidateRequest 统一校验请求数据
func (a Api) ValidateRequest(ctx *gin.Context, rt any) errcode.Error {
    if err := ctx.BindUri(rt); err != nil {
        return errcode.VerifyErrorWithTip(err.Error())
    }

    if err := ctx.ShouldBindQuery(rt); err != nil {
        return errcode.VerifyErrorWithTip(err.Error())
    }

	return nil
}

// Response 服务返回值
func (a Api) Response(ctx *gin.Context, res interface{}, errCode errcode.Error) {
	//设置code
	var rsp = gin.H{"code": errcode.OK, "msg": "ok", "data": res}
	if errCode != nil {
		rsp["code"] = errCode.Code()
		rsp["msg"] = errCode.Msg()
	}
	
	ctx.JSON(200, rsp)
}
